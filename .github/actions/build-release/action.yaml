name: build-release

inputs:
  git_tag:
    description: name of the release tag
    required: true


description: |
  Set the version in the version file
  Then add the necessary files to the zip file


runs:
  using: "composite"
  steps:
    - id: git-checkout
      uses: actions/checkout@v4
    - id: get-nonlatest-git-tag
      shell: bash
      env:
        git_tag: ${{ inputs.git_tag }}
      run: |
        # Show running through script
        set -euo pipefail
        # Get git commit id
        commit_id="$(git show-ref --tags "${git_tag}" | {
                     cut -d' ' -f1
                    })"
        # Now get git tag from commit id if it isn't 'latest'
        git_tag_non_latest="$(git show-ref | {
                              # Collect the tags on the commit id connected to 'latest'
                              grep "${commit_id}"
                             } | {
                              # Filter out heads/remotes, only want the tags
                              grep "refs/tags"
                             } | {
                              # Filter out 'latest' tag, should just be the release left
                              grep -v "refs/tags/latest"
                             } | {
                              # Now get the name of the release
                              cut -d' ' -f2
                             })"
        git_tag_non_latest="$(basename "${git_tag_non_latest}")"
        # Set git tag as output for this step
        echo "git_tag_non_latest=${git_tag_non_latest}" >> "${GITHUB_OUTPUT}"
    - id: install-python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - id: install-plugins-cli
      shell: bash
      run: |
        pip install \
          --extra-index-url https://test.pypi.org/simple \
          .
    - id: get-libica-version-from-pip-show
      shell: bash
      run: |
        libica_version="$(pip show libica | grep Version | cut -d' ' -f2)"
        echo "libica_version=${libica_version}" >> "${GITHUB_OUTPUT}"
    - id: build-release
      shell: bash
      env:
        ICAV2_PLUGINS_CLI_VERSION: ${{ steps.get-nonlatest-git-tag.outputs.git_tag_non_latest }}
        ICAV2_LIBICA_VERSION: ${{ steps.get-libica-version-from-pip-show.outputs.libica_version }}
      run: |

        # Show running of script
        set -euxo pipefail

        # Install commands
        sudo apt-get update -y -qq
        sudo apt-get install -y -qq \
          rsync \
          zip

        # Create release dir
        mkdir --parents "icav2-plugins-cli--${{ inputs.git_tag }}"

        # Add scripts
        rsync --archive \
          "src/" "icav2-plugins-cli--${{ inputs.git_tag }}/src/"

        # Add functions
        rsync --archive \
          "shell_functions/" "icav2-plugins-cli--${{ inputs.git_tag }}/shell_functions/"
        
        # Add templates
        rsync --archive \
          "templates/" "icav2-plugins-cli--${{ inputs.git_tag }}/templates/"

        # Add internal functions
        rsync --archive \
          "install.sh" "icav2-plugins-cli--${{ inputs.git_tag }}/install.sh"
        rsync --archive \
          "pyproject.toml" "icav2-plugins-cli--${{ inputs.git_tag }}/pyproject.toml"

        # Update the plugin version in the installation script
        sed --in-place \
          "s%^PLUGIN_VERSION=\"__PLUGIN_VERSION__\"$%PLUGIN_VERSION=\"${ICAV2_PLUGINS_CLI_VERSION}\"%" \
          "icav2-plugins-cli--${{ inputs.git_tag }}/install.sh"
        
        # Update the libica version in the installation script
        sed --in-place \
          "s%^LIBICA_VERSION=\"__LIBICA_VERSION__\"$%LIBICA_VERSION=\"${ICAV2_LIBICA_VERSION}\"%" \
          "icav2-plugins-cli--${{ inputs.git_tag }}/install.sh"

        # Confirm install.sh an executable
        chmod +x "icav2-plugins-cli--${{ inputs.git_tag }}/install.sh"
        
        # Add autocompletion
        rsync --archive \
          --include="bash/***" \
          --include="zsh/***" \
          --exclude="*" \
          "autocompletion/" "icav2-plugins-cli--${{ inputs.git_tag }}/autocompletion/" 

        # Create zip file
        zip \
          --quiet \
          --recurse-paths \
          "icav2-plugins-cli--${{ inputs.git_tag }}.zip" "icav2-plugins-cli--${{ inputs.git_tag }}"